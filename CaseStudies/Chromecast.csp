#import "Lib_HomeScan";
enum{ChromecastWiFiBeacon, ChromecastSSID, ChromecastBSSID, OpenSystemAuthenticationRequest, AssociationResponse, GetEurekaInfo, EurekaInfo,
 NewNonce, Name,SetupState,EthernetConnected,IPaddress,SsdpUdn,ModelName,DeviceCapabilities,SSIDSuffix,TosAccepted,BSSID,SDPublicKey,Certificate,
 IntermediateCerts,SignedData,PostScanWifi, SuccessScanResponse, GetScanResults,
 HomeWifiSSID, HomeWifiBSSID, Frequency, SignalLevel, WPAAuth7, WPACipher4, PostConnectWifi, Password, EncryptedPassword, Test, SuccessConnectRequest,
 NewIPAddress,Version,NewSetupState, PostSetEurekaInfo,NewName,OptInStatusTrue, SuccessSetRequest, PostSaveWifi, ImmediateTrue, SuccessSaveRequest,
 MDNSDiscoveryRequest, MDNSDiscoveryResponse, ValidScreenID, GetMdxSessionStatus, ScreenID, GetLoungeToken, Expiration,
 ScreenIDAssociation, GetScreenAvailability, AvailabilityResponse, PostBindRequest, Device,ID,ControlPointName,
 AppName, MethodSetPlayList, VideoID, CurrentVideoID, SID, GsessionID, LoungeStatus, PlaylistModified,
 OnAutoplayModeChanged, OnPlaylistModeChanged, SignRParam,VersionRParam,NameRParam,SetupStateRParam,EthernetConnectedRParam,
 IPaddressRParam,SsdpUdnRParam,ModelNameRParam,DeviceCapabilitiesRParam,SSIDSuffixRParam,TosAcceptedRParam,PublicKeyRParam,BSSIDRParam,
 Aenc, Adec, SDPrivateKey};

// Wifi channels
channel wifi0 0;
channel openwifi 0;
channel wifi 0;

#define NONCE_LOWER_BOUND_INCLUSIVE 0;
#define NONCE_UPPER_BOUND_INCLUSIVE 2;


/// MAIN ENTRY POINT TO THE WHOLE SYSTEM
//#define NUMBER_OF_CPS 3; // if this is changed - change SDBroadcastWiFiBeacon to send more or less beacons out



var sdReceivedNonce = -1;
var sdReceivedPassword = -1;
// Interaction sequence for the SD (the Chromecast)
SD() = SDBroadcastWiFiBeacon();
// BR = {1} in Transaction 1
// Sends 3 beacons to correspond with NUMBER_OF_CPS
//SDBroadcastWiFiBeacon() = atomic{
//	wifi0!ChromecastWiFiBeacon.ChromecastSSID.ChromecastBSSID 
//	->  wifi0!ChromecastWiFiBeacon.ChromecastSSID.ChromecastBSSID 
//	->  wifi0!ChromecastWiFiBeacon.ChromecastSSID.ChromecastBSSID -> Skip()};
	SDBroadcastWiFiBeacon() = wifi0!ChromecastWiFiBeacon.ChromecastSSID.ChromecastBSSID->
	(SDReceiveAuthRequest() [] SDBroadcastWiFiBeacon());
SDReceiveAuthRequest() = wifi0?ChromecastSSID.OpenSystemAuthenticationRequest -> SDSendAssociationResponse();
SDSendAssociationResponse() = wifi0!AssociationResponse -> SDReceiveEurekaInfoRequest();

// Start of Authentication segment

SDReceiveEurekaInfoRequest() =
	openwifi?GetEurekaInfo.SignRParam.VersionRParam.NameRParam.SetupStateRParam.EthernetConnectedRParam.IPaddressRParam.SsdpUdnRParam.ModelNameRParam.DeviceCapabilitiesRParam.SSIDSuffixRParam.TosAcceptedRParam.PublicKeyRParam.BSSIDRParam.newNonce 
	 -> saveNonce{sdReceivedNonce = newNonce} 
	 -> SDSendEurekaInfo();
// Branch possibility from 5 -> 4
SDSendEurekaInfo() = 
	openwifi!EurekaInfo.Version.Name.SetupState.EthernetConnected.IPaddress.SsdpUdn.ModelName.DeviceCapabilities.SSIDSuffix.TosAccepted.BSSID.SDPublicKey.Certificate.IntermediateCerts.SignedData.sdReceivedNonce
	-> (SDReceivePostScanWifi() [] SDReceiveEurekaInfoRequest());
SDReceivePostScanWifi() = openwifi?PostScanWifi -> SDSendSuccessScanResponse();
// Branch possibility from 7 -> 6
SDSendSuccessScanResponse() = openwifi!SuccessScanResponse -> (SDReceivePostScanWifi() [] SDReceiveGetScanResults());
SDReceiveGetScanResults() = openwifi?GetScanResults -> SDSendScanResults();
// Branch possibility from 9 -> 8
SDSendScanResults() = openwifi!HomeWifiSSID.HomeWifiBSSID.Frequency.SignalLevel.WPAAuth7.WPACipher4 -> (SDReceiveGetScanResults() [] SDReceivePostConnectWifi());
SDReceivePostConnectWifi() = openwifi?PostConnectWifi.HomeWifiSSID.Aenc.password.PublicKey.WPAAuth7.WPACipher4 
	-> savePassword{sdReceivedPassword = password}
	-> SDSendSuccessConnectRequest();
SDSendSuccessConnectRequest() = 
	adec.sdReceivedPassword.SDPublicKey.SDPrivateKey 
	-> openwifi!SuccessConnectRequest.Adec.sdReceivedPassword.SDPublicKey.SDPrivateKey 
	-> SDReceiveGetEurekaInfo2();
SDReceiveGetEurekaInfo2() = openwifi?GetEurekaInfo.IPaddressRParam.VersionRParam.SetupStateRParam -> SDSendEurekaInfo2();
SDSendEurekaInfo2() = openwifi!NewIPAddress.Version.NewSetupState -> SDReceivePostSetEurekaInfo();
SDReceivePostSetEurekaInfo() = openwifi?PostSetEurekaInfo.NewName.OptInStatusTrue -> SDSendSuccessSetRequest();
// Branch possibility from 15 -> 14
SDSendSuccessSetRequest() = openwifi!SuccessSetRequest -> (SDReceivePostSetEurekaInfo() [] SDReceivePostSaveWifi());
SDReceivePostSaveWifi() = openwifi?PostSaveWifi.ImmediateTrue -> SDSendSuccessSaveRequest();
SDSendSuccessSaveRequest() = openwifi!SuccessSaveRequest -> SDReceiveMDNSDiscoveryRequest();
SDReceiveMDNSDiscoveryRequest() = wifi?MDNSDiscoveryRequest -> (SDReceiveMDNSDiscoveryRequest() [] SDSendMDNSDiscoveryResponse());
SDSendMDNSDiscoveryResponse() = wifi!MDNSDiscoveryResponse -> SDSendValidScreenID();
SDSendValidScreenID() = wifi!ValidScreenID -> SDReceiveGetMdxSessionStatus();
SDReceiveGetMdxSessionStatus() = wifi?GetMdxSessionStatus -> SDSendScreenID();
SDSendScreenID() = wifi!ScreenID -> Skip();



// Limit the nonce range to prevent infinite state space
var cpNonce : {NONCE_LOWER_BOUND_INCLUSIVE..NONCE_UPPER_BOUND_INCLUSIVE} = NONCE_LOWER_BOUND_INCLUSIVE;
var cpSavedSDPublicKey = -1;
var encryptedPassword = -1;
// Interaction sequence for the CP (control point aka user-facing controller of the Chromecast)
//CPPar(numcps) = ||| {numcps} @ CP();
CP() = CPReceiveWiFiBeacon();
// Include guard condition for accepting the wifi beacon as legitimate from the SD
CPReceiveWiFiBeacon() = wifi0?ChromecastWiFiBeacon.ChromecastSSID.ChromecastBSSID 
		-> CPSendAuthRequest();
CPSendAuthRequest() = wifi0!ChromecastSSID.OpenSystemAuthenticationRequest 
		-> CPReceiveAssociationResponse();

// Start of Authentication segment
CPReceiveAssociationResponse() = wifi0?assocResponse 
		-> CPSendGetEurekaInfo;

CPSendGetEurekaInfo() = generateNewCPNonce{cpNonce = (cpNonce + 1) % (NONCE_UPPER_BOUND_INCLUSIVE + 1)} ->
	openwifi!GetEurekaInfo.SignRParam.VersionRParam.NameRParam.SetupStateRParam.EthernetConnectedRParam.IPaddressRParam.SsdpUdnRParam.ModelNameRParam.DeviceCapabilitiesRParam.SSIDSuffixRParam.TosAcceptedRParam.PublicKeyRParam.BSSIDRParam.cpNonce 
	-> CPReceiveCerts();
// This is the 5th -> 4th branch - very possible that we will re-send this message
CPReceiveCerts() = openwifi?[nonce == cpNonce && certificate == Certificate]EurekaInfo.Version.Name.SetupState.EthernetConnected.IPaddress.SsdpUdn.ModelName.DeviceCapabilities.SSIDSuffix.TosAccepted.BSSID.publicKey.certificate.IntermediateCerts.SignedData.nonce
	 -> verify{cpSavedSDPublicKey = publicKey}
	 -> (CPSendGetEurekaInfo() [] CPSendPostScanWifi());
CPSendPostScanWifi() = openwifi!PostScanWifi -> CPReceiveSuccessScanResponse();
// Branch possibility from 7 -> 6	
CPReceiveSuccessScanResponse() = openwifi?SuccessScanResponse -> (CPSendGetScanResults() [] CPSendPostScanWifi());
CPSendGetScanResults() = openwifi!GetScanResults -> CPReceiveScanResults();
// Branch possibility from 9 -> 8
CPReceiveScanResults() = openwifi?homeWifiSSID.homeWifiBSSID.frequency.signalLevel.wpaAuth7.wpaCipher4 -> 
(CPSendGetScanResults() [] CPSendPostConnectWifi(homeWifiSSID, wpaAuth7, wpaCipher4));
CPSendPostConnectWifi(homeWifiSSID, wpaAuth7, wpaCipher4) = 
	aenc.Password.cpSavedSDPublicKey ->
	openwifi!PostConnectWifi.homeWifiSSID.Aenc.Password.cpSavedSDPublicKey.wpaAuth7.wpaCipher4 -> CPReceiveSuccessConnectRequest(); 
CPReceiveSuccessConnectRequest() = successConn -> openwifi?SuccessConnectRequest.Adec.Password.SDPublicKey.SDPrivateKey  
	-> CPSendGetEurekaInfo2();
CPSendGetEurekaInfo2() = openwifi!GetEurekaInfo.IPaddressRParam.VersionRParam.SetupStateRParam  -> CPReceiveEurekaInfo2();
CPReceiveEurekaInfo2() = openwifi?NewIPAddress.Version.NewSetupState -> CPSendPostSetEurekaInfo();	
CPSendPostSetEurekaInfo() = openwifi!PostSetEurekaInfo.NewName.OptInStatusTrue -> CPReceiveSuccessSetRequest();
// Branch possibility from 15 -> 1411
CPReceiveSuccessSetRequest() = openwifi?SuccessSetRequest -> (CPSendPostSetEurekaInfo() [] CPSendPostSaveWifi());
CPSendPostSaveWifi() = openwifi!PostSaveWifi.ImmediateTrue -> CPReceiveSuccessSaveRequest();
CPReceiveSuccessSaveRequest() = openwifi?SuccessSaveRequest -> CPSendMDNSDiscoveryRequest();
CPSendMDNSDiscoveryRequest() = wifi!MDNSDiscoveryRequest -> (CPSendMDNSDiscoveryRequest() [] CPReceiveMDNSDiscoveryResponse());
CPReceiveMDNSDiscoveryResponse() = wifi?MDNSDiscoveryResponse -> CPSendGetMdxSessionStatus();
CPSendGetMdxSessionStatus() = wifi!GetMdxSessionStatus -> CPReceiveScreenID();
CPReceiveScreenID() = wifi?ScreenID -> CPSendGetLoungeToken();
CPSendGetLoungeToken() = wifi!GetLoungeToken.ScreenID -> CPReceiveAssociation();
// Branch possibility from 24 -> 25/27 
CPReceiveAssociation() = wifi?ScreenIDAssociation.Expiration.ScreenID -> (CPSendGetScreenAvailability() [] CPSendPostBindRequest()); 

// Start of Control Segment
CPSendGetScreenAvailability() = wifi!GetScreenAvailability.ScreenIDAssociation -> CPReceiveAvailabilityResponse();
CPReceiveAvailabilityResponse() = wifi?AvailabilityResponse.ScreenIDAssociation -> (CPSendGetScreenAvailability() [] CPSendPostBindRequest());
CPSendPostBindRequest() = wifi!PostBindRequest.ScreenIDAssociation.Device.ID.ControlPointName.AppName.MethodSetPlayList.VideoID -> CPReceiveCurrentVideoID();
// Branch possibility from 28 -> 27/29 
CPReceiveCurrentVideoID() = wifi?CurrentVideoID.SID.GsessionID.LoungeStatus.PlaylistModified.OnAutoplayModeChanged.OnPlaylistModeChanged -> 
	(CPSendPostBindRequest() [] CPSendPostBindRequestWithoutVideoID());
CPSendPostBindRequestWithoutVideoID() = wifi!PostBindRequest.ScreenIDAssociation.Device.ID.ControlPointName.AppName.MethodSetPlayList -> CPReceiveCurrentVideoIDWithoutStreaming();
CPReceiveCurrentVideoIDWithoutStreaming() = wifi?CurrentVideoID.SID.GsessionID.LoungeStatus.PlaylistModified.OnAutoplayModeChanged.OnPlaylistModeChanged -> 
	(CPSendPostBindRequestWithoutVideoID() [] Skip());
	
	


GS() = GSReceiveValidScreenID();
GSReceiveValidScreenID() = wifi?ValidScreenID -> GSReceiveGetLoungeToken();
GSReceiveGetLoungeToken() = wifi?GetLoungeToken.screenID -> GSSendAssociation(); 
// Branch possibility from 24 -> 25/27 
GSSendAssociation() = wifi!ScreenIDAssociation.Expiration.ScreenID 
	-> saveMapScreenIDAndAssociation
	-> (GSReceiveGetScreenAvailability() [] GSReceivePostBindRequest());

// Start of Control segment
GSReceiveGetScreenAvailability() = wifi?GetScreenAvailability.ScreenIDAssociation -> verifyAssociation1 -> GSSendAvailabilityResponse();
// Branch possibility from 26 -> 25
GSSendAvailabilityResponse() = wifi!AvailabilityResponse.ScreenIDAssociation -> (GSReceiveGetScreenAvailability() [] GSReceivePostBindRequest());
GSReceivePostBindRequest() = wifi?PostBindRequest.ScreenIDAssociation.Device.ID.ControlPointName.AppName.MethodSetPlayList.VideoID -> verifyAssociation2 -> GSSendCurrentVideoID();
// Branch possibility from 28 -> 27/29 
GSSendCurrentVideoID() = gsStreamVideo -> wifi!CurrentVideoID.SID.GsessionID.LoungeStatus.PlaylistModified.OnAutoplayModeChanged.OnPlaylistModeChanged -> 
	(GSReceivePostBindRequest() [] GSReceivePostBindRequestWithoutVideoID());
GSReceivePostBindRequestWithoutVideoID() = wifi?PostBindRequest.ScreenIDAssociation.Device.ID.ControlPointName.AppName.MethodSetPlayList -> verifyAssociation -> GSSendCurrentVideoIDWithoutStreaming();
GSSendCurrentVideoIDWithoutStreaming() = wifi!CurrentVideoID.SID.GsessionID.LoungeStatus.PlaylistModified.OnAutoplayModeChanged.OnPlaylistModeChanged -> 
	(GSReceivePostBindRequestWithoutVideoID() [] Skip());

//System = CPPar(NUMBER_OF_CPS) ||| SD() ||| GS();
System = CP() ||| SD() ||| GS();// 

#assert System deadlockfree;
#define x sdReceivedNonce > -1;
#assert System reaches x ;